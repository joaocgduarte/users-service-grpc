// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	protos "github.com/plagioriginal/users-service-grpc/users"
	mock "github.com/stretchr/testify/mock"
)

// UsersServer is an autogenerated mock type for the UsersServer type
type UsersServer struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) AddUser(_a0 context.Context, _a1 *protos.NewUserRequest) (*protos.UserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protos.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protos.NewUserRequest) *protos.UserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protos.NewUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) Login(_a0 context.Context, _a1 *protos.LoginRequest) (*protos.TokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protos.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protos.LoginRequest) *protos.TokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protos.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) Logout(_a0 context.Context, _a1 *protos.RefreshRequest) (*protos.TokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protos.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RefreshRequest) *protos.TokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protos.RefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) Refresh(_a0 context.Context, _a1 *protos.RefreshRequest) (*protos.TokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protos.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RefreshRequest) *protos.TokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protos.RefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUsersServer provides a mock function with given fields:
func (_m *UsersServer) mustEmbedUnimplementedUsersServer() {
	_m.Called()
}
